// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YooVisitApi.Data;

#nullable disable

namespace YooVisitApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250903092330_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YooVisitApi.Models.PastilleModel.Pastille", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HorairesOuverture")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PeriodeConstruction")
                        .HasColumnType("text");

                    b.Property<string>("StyleArchitectural")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Pastilles");
                });

            modelBuilder.Entity("YooVisitApi.Models.PastilleModel.PastilleRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PastilleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RaterUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PastilleId", "RaterUserId")
                        .IsUnique();

                    b.ToTable("PastilleRatings");
                });

            modelBuilder.Entity("YooVisitApi.Models.PhotoModel.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PastilleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PastilleId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("YooVisitApi.Models.QuizModel.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PastilleId")
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PastilleId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("YooVisitApi.Models.QuizModel.QuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("YooVisitApi.Models.UserModel.UserApplication", b =>
                {
                    b.Property<Guid>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biographie")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProfilePictureFileName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YooVisitApi.Models.UserModel.UserQuizAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasCorrect")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "QuizId")
                        .IsUnique();

                    b.ToTable("UserQuizAttempts");
                });

            modelBuilder.Entity("YooVisitApi.Models.ZoneModel.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoordinatesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("YooVisitApi.Models.PastilleModel.Pastille", b =>
                {
                    b.HasOne("YooVisitApi.Models.UserModel.UserApplication", "User")
                        .WithMany("Pastilles")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YooVisitApi.Models.PastilleModel.PastilleRating", b =>
                {
                    b.HasOne("YooVisitApi.Models.PastilleModel.Pastille", null)
                        .WithMany("Ratings")
                        .HasForeignKey("PastilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YooVisitApi.Models.PhotoModel.Photo", b =>
                {
                    b.HasOne("YooVisitApi.Models.PastilleModel.Pastille", "Pastille")
                        .WithMany("Photos")
                        .HasForeignKey("PastilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pastille");
                });

            modelBuilder.Entity("YooVisitApi.Models.QuizModel.Quiz", b =>
                {
                    b.HasOne("YooVisitApi.Models.PastilleModel.Pastille", "Pastille")
                        .WithMany("Quizzes")
                        .HasForeignKey("PastilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pastille");
                });

            modelBuilder.Entity("YooVisitApi.Models.QuizModel.QuizAnswer", b =>
                {
                    b.HasOne("YooVisitApi.Models.QuizModel.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("YooVisitApi.Models.PastilleModel.Pastille", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Quizzes");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("YooVisitApi.Models.QuizModel.Quiz", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("YooVisitApi.Models.UserModel.UserApplication", b =>
                {
                    b.Navigation("Pastilles");
                });
#pragma warning restore 612, 618
        }
    }
}
